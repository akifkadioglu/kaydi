// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/akifkadioglu/kaydi/ent/list"
	"github.com/akifkadioglu/kaydi/ent/task"
	"github.com/akifkadioglu/kaydi/ent/user"
	"github.com/google/uuid"
)

// ListCreate is the builder for creating a List entity.
type ListCreate struct {
	config
	mutation *ListMutation
	hooks    []Hook
}

// SetName sets the "name" field.
func (lc *ListCreate) SetName(s string) *ListCreate {
	lc.mutation.SetName(s)
	return lc
}

// SetNillableName sets the "name" field if the given value is not nil.
func (lc *ListCreate) SetNillableName(s *string) *ListCreate {
	if s != nil {
		lc.SetName(*s)
	}
	return lc
}

// SetColor sets the "color" field.
func (lc *ListCreate) SetColor(s string) *ListCreate {
	lc.mutation.SetColor(s)
	return lc
}

// SetID sets the "id" field.
func (lc *ListCreate) SetID(u uuid.UUID) *ListCreate {
	lc.mutation.SetID(u)
	return lc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (lc *ListCreate) SetNillableID(u *uuid.UUID) *ListCreate {
	if u != nil {
		lc.SetID(*u)
	}
	return lc
}

// AddTaskIDs adds the "tasks" edge to the Task entity by IDs.
func (lc *ListCreate) AddTaskIDs(ids ...uuid.UUID) *ListCreate {
	lc.mutation.AddTaskIDs(ids...)
	return lc
}

// AddTasks adds the "tasks" edges to the Task entity.
func (lc *ListCreate) AddTasks(t ...*Task) *ListCreate {
	ids := make([]uuid.UUID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return lc.AddTaskIDs(ids...)
}

// AddUserIDs adds the "users" edge to the User entity by IDs.
func (lc *ListCreate) AddUserIDs(ids ...uuid.UUID) *ListCreate {
	lc.mutation.AddUserIDs(ids...)
	return lc
}

// AddUsers adds the "users" edges to the User entity.
func (lc *ListCreate) AddUsers(u ...*User) *ListCreate {
	ids := make([]uuid.UUID, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return lc.AddUserIDs(ids...)
}

// Mutation returns the ListMutation object of the builder.
func (lc *ListCreate) Mutation() *ListMutation {
	return lc.mutation
}

// Save creates the List in the database.
func (lc *ListCreate) Save(ctx context.Context) (*List, error) {
	lc.defaults()
	return withHooks(ctx, lc.sqlSave, lc.mutation, lc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (lc *ListCreate) SaveX(ctx context.Context) *List {
	v, err := lc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (lc *ListCreate) Exec(ctx context.Context) error {
	_, err := lc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (lc *ListCreate) ExecX(ctx context.Context) {
	if err := lc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (lc *ListCreate) defaults() {
	if _, ok := lc.mutation.ID(); !ok {
		v := list.DefaultID()
		lc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (lc *ListCreate) check() error {
	if _, ok := lc.mutation.Color(); !ok {
		return &ValidationError{Name: "color", err: errors.New(`ent: missing required field "List.color"`)}
	}
	return nil
}

func (lc *ListCreate) sqlSave(ctx context.Context) (*List, error) {
	if err := lc.check(); err != nil {
		return nil, err
	}
	_node, _spec := lc.createSpec()
	if err := sqlgraph.CreateNode(ctx, lc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	lc.mutation.id = &_node.ID
	lc.mutation.done = true
	return _node, nil
}

func (lc *ListCreate) createSpec() (*List, *sqlgraph.CreateSpec) {
	var (
		_node = &List{config: lc.config}
		_spec = sqlgraph.NewCreateSpec(list.Table, sqlgraph.NewFieldSpec(list.FieldID, field.TypeUUID))
	)
	if id, ok := lc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := lc.mutation.Name(); ok {
		_spec.SetField(list.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := lc.mutation.Color(); ok {
		_spec.SetField(list.FieldColor, field.TypeString, value)
		_node.Color = &value
	}
	if nodes := lc.mutation.TasksIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   list.TasksTable,
			Columns: []string{list.TasksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := lc.mutation.UsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   list.UsersTable,
			Columns: list.UsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// ListCreateBulk is the builder for creating many List entities in bulk.
type ListCreateBulk struct {
	config
	builders []*ListCreate
}

// Save creates the List entities in the database.
func (lcb *ListCreateBulk) Save(ctx context.Context) ([]*List, error) {
	specs := make([]*sqlgraph.CreateSpec, len(lcb.builders))
	nodes := make([]*List, len(lcb.builders))
	mutators := make([]Mutator, len(lcb.builders))
	for i := range lcb.builders {
		func(i int, root context.Context) {
			builder := lcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ListMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, lcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, lcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, lcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (lcb *ListCreateBulk) SaveX(ctx context.Context) []*List {
	v, err := lcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (lcb *ListCreateBulk) Exec(ctx context.Context) error {
	_, err := lcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (lcb *ListCreateBulk) ExecX(ctx context.Context) {
	if err := lcb.Exec(ctx); err != nil {
		panic(err)
	}
}
